// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/message-service.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MessageService service

func NewMessageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "MessageService.MessageByID",
			Path:    []string{"/api/v1/messages/{message_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "MessageService.SaveMessage",
			Path:    []string{"/api/v1/messages"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "MessageService.GetMessageStream",
			Path:    []string{"/api/v1/messages"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "MessageService.GetValidAPICall",
			Path:    []string{"/api/v1/valid"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "MessageService.GetInvalidAPICall",
			Path:    []string{"/api/v1/invalid"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for MessageService service

type MessageService interface {
	MessageByID(ctx context.Context, req *SingleMessageRequest, opts ...client.CallOption) (*SingleMessageResponse, error)
	SaveMessage(ctx context.Context, req *SaveMessageRequest, opts ...client.CallOption) (*SaveMessageResponse, error)
	GetMessageStream(ctx context.Context, req *GetListMessageRequest, opts ...client.CallOption) (MessageService_GetMessageStreamService, error)
	GetValidAPICall(ctx context.Context, req *APIRequest, opts ...client.CallOption) (*APIResponse, error)
	GetInvalidAPICall(ctx context.Context, req *APIRequest, opts ...client.CallOption) (*APIResponse, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) MessageByID(ctx context.Context, req *SingleMessageRequest, opts ...client.CallOption) (*SingleMessageResponse, error) {
	rsp := &SingleMessageResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "MessageService.MessageByID", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *messageService) SaveMessage(ctx context.Context, req *SaveMessageRequest, opts ...client.CallOption) (*SaveMessageResponse, error) {
	rsp := &SaveMessageResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "MessageService.SaveMessage", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *messageService) GetMessageStream(ctx context.Context, req *GetListMessageRequest, opts ...client.CallOption) (MessageService_GetMessageStreamService, error) {
	stream, err := c.c.Stream(ctx, c.c.NewRequest(c.name, "MessageService.GetMessageStream", &GetListMessageRequest{}), opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(req); err != nil {
		return nil, err
	}
	return &messageServiceGetMessageStream{stream}, nil
}

type MessageService_GetMessageStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*GetListMessageResponse, error)
}

type messageServiceGetMessageStream struct {
	stream client.Stream
}

func (x *messageServiceGetMessageStream) Close() error {
	return x.stream.Close()
}

func (x *messageServiceGetMessageStream) Context() context.Context {
	return x.stream.Context()
}

func (x *messageServiceGetMessageStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *messageServiceGetMessageStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *messageServiceGetMessageStream) Recv() (*GetListMessageResponse, error) {
	m := &GetListMessageResponse{}
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageService) GetValidAPICall(ctx context.Context, req *APIRequest, opts ...client.CallOption) (*APIResponse, error) {
	rsp := &APIResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "MessageService.GetValidAPICall", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *messageService) GetInvalidAPICall(ctx context.Context, req *APIRequest, opts ...client.CallOption) (*APIResponse, error) {
	rsp := &APIResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "MessageService.GetInvalidAPICall", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for MessageService service

type MessageServiceHandler interface {
	MessageByID(context.Context, *SingleMessageRequest, *SingleMessageResponse) error
	SaveMessage(context.Context, *SaveMessageRequest, *SaveMessageResponse) error
	GetMessageStream(context.Context, *GetListMessageRequest, MessageService_GetMessageStreamStream) error
	GetValidAPICall(context.Context, *APIRequest, *APIResponse) error
	GetInvalidAPICall(context.Context, *APIRequest, *APIResponse) error
}

func RegisterMessageServiceHandler(s server.Server, hdlr MessageServiceHandler, opts ...server.HandlerOption) error {
	type messageService interface {
		MessageByID(ctx context.Context, req *SingleMessageRequest, rsp *SingleMessageResponse) error
		SaveMessage(ctx context.Context, req *SaveMessageRequest, rsp *SaveMessageResponse) error
		GetMessageStream(ctx context.Context, stream server.Stream) error
		GetValidAPICall(ctx context.Context, req *APIRequest, rsp *APIResponse) error
		GetInvalidAPICall(ctx context.Context, req *APIRequest, rsp *APIResponse) error
	}
	type MessageService struct {
		messageService
	}
	h := &messageServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MessageService.MessageByID",
		Path:    []string{"/api/v1/messages/{message_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MessageService.SaveMessage",
		Path:    []string{"/api/v1/messages"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MessageService.GetMessageStream",
		Path:    []string{"/api/v1/messages"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MessageService.GetValidAPICall",
		Path:    []string{"/api/v1/valid"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MessageService.GetInvalidAPICall",
		Path:    []string{"/api/v1/invalid"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MessageService{h}, opts...))
}

type messageServiceHandler struct {
	MessageServiceHandler
}

func (h *messageServiceHandler) MessageByID(ctx context.Context, req *SingleMessageRequest, rsp *SingleMessageResponse) error {
	return h.MessageServiceHandler.MessageByID(ctx, req, rsp)
}

func (h *messageServiceHandler) SaveMessage(ctx context.Context, req *SaveMessageRequest, rsp *SaveMessageResponse) error {
	return h.MessageServiceHandler.SaveMessage(ctx, req, rsp)
}

func (h *messageServiceHandler) GetMessageStream(ctx context.Context, stream server.Stream) error {
	m := &GetListMessageRequest{}
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MessageServiceHandler.GetMessageStream(ctx, m, &messageServiceGetMessageStreamStream{stream})
}

type MessageService_GetMessageStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*GetListMessageResponse) error
}

type messageServiceGetMessageStreamStream struct {
	stream server.Stream
}

func (x *messageServiceGetMessageStreamStream) Close() error {
	return x.stream.Close()
}

func (x *messageServiceGetMessageStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *messageServiceGetMessageStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *messageServiceGetMessageStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *messageServiceGetMessageStreamStream) Send(m *GetListMessageResponse) error {
	return x.stream.Send(m)
}

func (h *messageServiceHandler) GetValidAPICall(ctx context.Context, req *APIRequest, rsp *APIResponse) error {
	return h.MessageServiceHandler.GetValidAPICall(ctx, req, rsp)
}

func (h *messageServiceHandler) GetInvalidAPICall(ctx context.Context, req *APIRequest, rsp *APIResponse) error {
	return h.MessageServiceHandler.GetInvalidAPICall(ctx, req, rsp)
}
