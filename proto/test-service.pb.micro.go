// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/test-service.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TestService service

func NewTestServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "TestService.GetTest",
			Path:    []string{"/api/v1/get"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "TestService.PostTest",
			Path:    []string{"/api/v1/post"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for TestService service

type TestService interface {
	GetTest(ctx context.Context, req *GetTestRequest, opts ...client.CallOption) (*GetTestResponse, error)
	PostTest(ctx context.Context, req *PostTestRequest, opts ...client.CallOption) (*PostTestResponse, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) GetTest(ctx context.Context, req *GetTestRequest, opts ...client.CallOption) (*GetTestResponse, error) {
	rsp := &GetTestResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "TestService.GetTest", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *testService) PostTest(ctx context.Context, req *PostTestRequest, opts ...client.CallOption) (*PostTestResponse, error) {
	rsp := &PostTestResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "TestService.PostTest", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for TestService service

type TestServiceHandler interface {
	GetTest(context.Context, *GetTestRequest, *GetTestResponse) error
	PostTest(context.Context, *PostTestRequest, *PostTestResponse) error
}

func RegisterTestServiceHandler(s server.Server, hdlr TestServiceHandler, opts ...server.HandlerOption) error {
	type testService interface {
		GetTest(ctx context.Context, req *GetTestRequest, rsp *GetTestResponse) error
		PostTest(ctx context.Context, req *PostTestRequest, rsp *PostTestResponse) error
	}
	type TestService struct {
		testService
	}
	h := &testServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TestService.GetTest",
		Path:    []string{"/api/v1/get"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TestService.PostTest",
		Path:    []string{"/api/v1/post"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&TestService{h}, opts...))
}

type testServiceHandler struct {
	TestServiceHandler
}

func (h *testServiceHandler) GetTest(ctx context.Context, req *GetTestRequest, rsp *GetTestResponse) error {
	return h.TestServiceHandler.GetTest(ctx, req, rsp)
}

func (h *testServiceHandler) PostTest(ctx context.Context, req *PostTestRequest, rsp *PostTestResponse) error {
	return h.TestServiceHandler.PostTest(ctx, req, rsp)
}
